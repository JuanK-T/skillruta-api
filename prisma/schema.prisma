generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id               String   @id @default(cuid())
  email            String   @unique
  passwordHash     String
  role             Role     @default(USER)
  refreshTokenHash String?
  tokenVersion     Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  enrollments     Enrollment[]
  progresses      Progress[]
  badges          UserBadge[]
  coursesAuthored Course[]     @relation("CourseAuthor")
}

enum CourseCategory {
  PROGRAMMING
  DESIGN
  BUSINESS
  MARKETING
  LIFESTYLE
  OTHER
}

model Course {
  id               String         @id @default(cuid())
  title            String
  slug             String         @unique
  description      String?
  category         CourseCategory
  isPublished      Boolean        @default(false)
  publishedAt      DateTime?
  thumbnailUrl     String?
  totalDurationSec Int?

  authorId String
  author   User   @relation("CourseAuthor", fields: [authorId], references: [id])

  chapters    Chapter[]
  enrollments Enrollment[]
  badges      Badge[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([category])
  @@index([isPublished])
  @@index([authorId])
}

model Chapter {
  id          String   @id @default(uuid())
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  order       Int
  contentUrl  String?
  durationSec Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  progresses Progress[]
  media      Media[] // Relación inversa añadida

  @@unique([courseId, order]) // orden único dentro del curso
  @@index([courseId])
}

model Enrollment {
  id         String   @id @default(uuid())
  userId     String
  courseId   String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrolledAt DateTime @default(now())

  @@unique([userId, courseId]) // una inscripción por curso
  @@index([userId])
  @@index([courseId])
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Progress {
  id              String         @id @default(uuid())
  userId          String
  chapterId       String
  status          ProgressStatus @default(NOT_STARTED)
  lastPositionSec Int            @default(0)
  percent         Int            @default(0)
  startedAt       DateTime?
  completedAt     DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@unique([userId, chapterId]) // una fila de progreso por usuario/capítulo
  @@index([userId, status])
  @@index([chapterId])
}

enum BadgeSource {
  AUTO
  MANUAL
}

model Badge {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String?
  iconUrl     String?

  // opcional: insignia asociada a un curso (ej. “Curso X completado”)
  courseId String?
  course   Course? @relation(fields: [courseId], references: [id])

  createdAt  DateTime    @default(now())
  userBadges UserBadge[]
}

model UserBadge {
  id        String      @id @default(uuid())
  userId    String
  badgeId   String
  source    BadgeSource @default(AUTO)
  awardedAt DateTime    @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId]) // una vez por usuario
}

enum MediaKind {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

model Media {
  id         String    @id @default(uuid())
  kind       MediaKind
  storageKey String    @unique // clave en MinIO
  url        String?
  mimeType   String?
  sizeBytes  Int?
  sha256     String?
  createdAt  DateTime  @default(now())

  // si quieres asociar un archivo a un capítulo
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: SetNull)
}
